// Планирование: setTimeout и setInterval
//
// Мы можем вызвать функцию не в данный момент, а позже, через заданный интервал времени.
// Это называется "Планирование вызова"
//
// Для этого существует 2 метода:
// - setTimeout - позволяет вызвать функцию один раз через определенный интервал времени.
// - setInterval - позволяет вызывать функцию регулярно, через определнный интервал времени.
//
// Эти методы не являются частью спецификации JS, Но большинство сред выполения JS-кода
// имеют внутренний планировщик и предоставляют доступ к этим методам. В частности, они
// поддерживаются во всех браузерах и NodeJS.
//
//
//// setTimeout
//
// Синтаксис:
() => {
  let timerId = setTimeout(func | code, [delay], [arg1], [arg2]);
};

// Принимает функцию, задержку в ms, и аргументы для функции
// Функцию можно передать строкой, но это не рекомендуется.
// Функция передается без вызова, он ее сам вызывает.

////
///// setInterval
//
// Тоже самое, только вызывает функцию регулярно
// Также эти функции возвращают id, используемый для отмены.

// Вложенный setTimeout
//
// Есть два способа запускать что-то регулярно.
// Один из них setInterval, другим является вложенный setTimeout.
// Например:
//
() => {
  /** вместо:
let timerId = setInterval(() => alert('tick'), 2000);
*/

  let timerId = setTimeout(function tick() {
    alert("tick");
    timerId = setTimeout(tick, 2000); // (*)
  }, 2000);
};

// Метод setTimeout выше планирует следующий вызов прямо после окончания текущего (*).
// Вложенный setTimeout - более гибкий метод, чем setInterval. С его помощью последующий
// вызов может быть задан по разному в зависимости от результатов предыдущего.
//
// Например необходимо написать сервис, который отправляет запрос для получения данных
// на сервер каждые 5 секунд, но если сервер перегружен, то необходимо увеличить интервал
// запросов до 10, 20, 40... секунд
// Например:
() => {
  let delay = 5000;

  let timerId = setTimeout(function request() {
    fetch;

    if (!fetch) {
      // увеличить интервал для следующего запроса
      delay *= 2;
    }

    timerId = setTimeout(request, delay);
  }, delay);
};
