//// Глобальный объект

// Глобальный объект предоставляет переменные и функции, доступные в любом месте программы.
// По умолчанию это те, что встроены в язык или среду исполнения.
//
// В браузере он называется window, в NodeJS - global, в другой среде исполнения может
// называться иначе.
//
// Недавно globalThis был добавлен в язык как стандартизированное имя для глобального
// объекта, которое должно поддерживаться в любом окружении. Он поддерживается во всех
// основных браузерах.

// Ко всем свойствам глобального объекта можно обратиться напрямую:
() => {
  alert("Привет");
  window.alert("Привет");
};

// В браузере глобальные функции и переменные, объявленные с помощью var (не let/const!),
// становятся свойствами глобального объекта:
() => {
  var gVar = 5;
  console.log(window.gVar);
};

// То же самое касается функция, объявленных с помощью синтаксиса Function Declaration
// (Выражения с ключевым словом function в основном потоке кода, не Function Expression).
//
// Пожалуйста не полагайтесь на это. Такое поведение поддерживается для совместимости.
// В современных проектах, использующих JavaScript - модули, такого не происходит.
//
// Если бы мы объявили переменную при помощи let, то такого бы не произошло:
() => {
  let gLet = 5;
  console.log(window.gLet); // undefined
};

// Если свойство настолько важное, что вы хотите сделать его доступным для всей программы,
// запишите его в глобальный объект напрямую:
() => {
  window.currentUser = {
    name: "John",
  };

  console.log(currentUser.name); // John
  console.log(window.currentUser.name); // John
};

// При этом обычно не рекомендуется использовать глобальные переменные. Следует применять их
// как можно реже. Дизайн кода, при котором функция получается входные параметры и выдает
// определенный результат, чище, надежнее и удобнее для тестирования, чем когда используются
// внешние, а тем более глобальные переменные.

////
//      Использование для полифилов
////

// Глобальный объект можно использовать, чтобы проверить поддержку современных возможностей
// языка.
//
// Например, проверить наличие встроенного объекта Promise (такая поддержка отсутствует в
// очень старых браузерах):
() => {
  if (!window.Promise) {
    console.log("Ваш браузер очень старый");
  }
  // Если нет, мы можем создать полифил: добавить функции, которые не поддерживаются окружением
  // но существуют в современном стандарте.
  () => {
    if (!window.Promise) {
      // window.Promise = ///
    }
  };
};

////
//          Итого
////

// - Глобальный объект хранит переменные, которые должны быть доступны в любом месте программы.
//   Это включает в себя как встроенные объекты, например Array, так и характерные для окружения
//   свойства, например window.innerHeight - высота окна браузера

// - Глобальный объект имеет универсальное имя - globalThis.
//   Но чаще на него ссылаются по старому, используя имя характерное для окружения, такое как
//   window (бразуер) и global (nodeJS)

// - Следует хранить значения в глобальном объекте, только если они действительно глобальны
//   для нашего проекта. И стараться свести их количество к минимуму.

// - В браузерах, если только мы не используем модули, глобальные функции и переменные,
//   объявленные с помощью var, становятся свойствами глобального объекта.

// - Для того, чтобы код был проще и в будущем его легче было поддерживать, следует
//   обращаться к свойствам глобального объекта напрямую, как window.x
