// 1. Обработка исключений в функции:
// Напишите функцию `divide`, которая принимает два аргумента.
// Если второй аргумент равен нулю, функция должна выбрасывать ошибку.
// Используйте конструкцию `try...catch`, чтобы отловить это исключение.

function devide(a, b) {
  try {
    if (b === 0) {
      throw new Error("Второй аргумент не может быть равен нулю");
    }
    console.log("Успешно!");
  } catch (error) {
    alert(error.message);
  }
}
devide(1, 0);

// 2. Работа с JSON:
//    Напишите функцию `parseJSON`, которая принимает строку и пытается преобразовать её в объект JavaScript
//    с помощью `JSON.parse()`. Если строка некорректна и возникает ошибка, используйте `try...catch`,
//    чтобы отловить эту ошибку и вернуть пустой объект вместо выбрасывания исключения.

function parseJSON(jsonString) {
  try {
    return JSON.parse(jsonString);
  } catch {
    return {};
  }
}

parseJSON('{"name": "MAKSIM"}');
parseJSON("asdad");

// 3. Чтение файла (имитация):
//    Создайте функцию `readFile`, которая принимает имя файла.
//    Если имя файла равно `"не_существующий_файл.txt"`, выбрасывайте ошибку.
//    Используйте `try...catch`, чтобы обработать это исключение и вернуть строку "Файл не найден."
//    Если файл существует, возвращайте "Файл прочитан успешно."

function readFile(fileName) {
  try {
    if (fileName === "не_существующий_файл.txt") {
      throw new Error("Файл не найден");
    }
    return "Файл прочитан успешно.";
  } catch (error) {
    console.log(error.message);
  }
}

// 4. Обработка неправильного типа данных:
//    Напишите функцию `checkArray`, которая принимает параметр.
//    Если параметр не является массивом, выбрасывайте ошибку.
//    Используйте `try...catch` для обработки ошибки и возвращайте сообщение "Ожидался массив."
//    Если это массив, возвращайте "Это массив."

function checkArray(param) {
  try {
    if (!Array.isArray(param)) {
      throw new Error("Параметр не является массивом!");
    }
    return "Это массив";
  } catch (error) {
    console.log(error.message);
  }
}
