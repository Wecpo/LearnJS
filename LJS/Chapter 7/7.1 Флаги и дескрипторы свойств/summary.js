// Флаги и дескрипторы свойств
//
// Как мы знаем объекты могут содержать свойства.
//
// До этого момента мы рассматривали свойство только как пару "ключ-начение". Но на самом деле
// свойство объекта гораздно мощнее и гибче.
//
// В этой главе мы изучим дополнительные флаги конфигурации для свойств, а в следующей
// увидим, как можно незаметно превратить их в специальные функции - геттеры и сеттеры.
//
//
// Флаги свойств
//
// Помимо значения value, свойства объекта имеют три специальных атрибута (флага)
// - writable - если true, свойство можно изменить, иначе оно только для чтения.
// - enumerable - если true, свойство перечисляется в циклах, в противом случае циклы его игнорируют.
// - configurable - если true, свойство можно удалить, а эти атрибуты можно изменять, иначе
//   этого делать нельзя.
//
// Обычно эти атрибуты скрыты. Когда мы создаем свойство обычным способом, все они имеют значение true.
//
// Метод Object.getOwnPropertyDescriptor позволяет получить полную информацию о свойстве.
//
() => {
  let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);
  //
  // obj - объект из которого мы получаем информацию.
  // propertyName - имя свойства.
  //
  // Возвращаемое значение - это объект, так называемый 'дескриптор свойства': он содержит
  // значение свойства и его флаги.
  //
  // Например:
  () => {
    let user = {
      name: "John",
    };

    let descriptor = Object.getOwnPropertyDescriptor(user, "name");
    console.log(JSON.stringify(descriptor, null, 2));
    /* дескриптор свойства:

        {
            "value": "John",
            "writable": true,
            "enumerable": true,
            "configurable": true
        }

    */
  };

  // Чтобы изменить флаги, мы можем использовать метод Object.defineProperty
  () => {
    Object.defineProperty(obj, propertyName, descriptor);

    // obj, propertyName - объект и свойство, для которого нужно применить дескриптор.
    // descriptor - применяемый дескриптор
    //
    // Если свойство существует, defineProperty обновит его флаги. В противом случае метод создает
    // новое свойство с указанным значением и флагами; если какой либо флаг не указан явно, ему
    // присваивается значение false.
    //
    // Например, здесь создается свойство name, все флаги которого имеют значением false:
    () => {
      let user = {};

      Object.defineProperty(user, "name", {
        value: "John",
      });

      let descriptor = Object.getOwnPropertyDescriptor(user, "name");

      console.log(JSON.stringify(descriptor, null, 2));

      /*
            {
                "value": "John",
                "writable": false,
                "enumerable": false,
                "configurable": false
            }
      */

      //
      // Сравните это с предыдущим примером, в котором мы создали свойство user.name обычным способом
      // в этот раз все флаги имеют значение false. Если это не то, что нам нужно, надо присвоить им
      // значения true в параметре descriptor.
      //
      // Теперь давайте рассмотрим на примерах, что нам дает использование флагов.
    };
  };
};

//
//
//
//
// Только для чтения
